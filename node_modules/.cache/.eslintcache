[{"C:\\Users\\Korisnik\\Downloads\\ALGEBRA\\Portfolio\\Seminarski\\algebra-seminarski\\src\\index.js":"1","C:\\Users\\Korisnik\\Downloads\\ALGEBRA\\Portfolio\\Seminarski\\algebra-seminarski\\src\\Chat.js":"2","C:\\Users\\Korisnik\\Downloads\\ALGEBRA\\Portfolio\\Seminarski\\algebra-seminarski\\src\\reportWebVitals.js":"3"},{"size":642,"mtime":1682342246313,"results":"4","hashOfConfig":"5"},{"size":7254,"mtime":1683148450607,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1680807287290,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vaxdnt",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Korisnik\\Downloads\\ALGEBRA\\Portfolio\\Seminarski\\algebra-seminarski\\src\\index.js",[],[],"C:\\Users\\Korisnik\\Downloads\\ALGEBRA\\Portfolio\\Seminarski\\algebra-seminarski\\src\\Chat.js",["18","19"],[],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { MDBListGroup, MDBListGroupItem, MDBInput, MDBBtn } from 'mdb-react-ui-kit';\r\nimport './Chat.css';\r\n\r\nexport default function Chat() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [members, setMembers] = useState([]);\r\n  const [userColor, setUserColor] = useState(null);\r\n\r\n  const randomName = () => {\r\n    const adjectives = [\"autumn\", \"hidden\", \"bitter\", \"misty\", \"silent\", \"empty\", \"dry\", \"dark\", \"summer\", \"icy\", \"delicate\", \"quiet\", \"white\", \"cool\", \"spring\", \"winter\", \"patient\", \"twilight\", \"dawn\", \"crimson\", \"wispy\", \"weathered\", \"blue\", \"billowing\", \"broken\", \"cold\", \"damp\", \"falling\", \"frosty\", \"green\", \"long\", \"late\", \"lingering\", \"bold\", \"little\", \"morning\", \"muddy\", \"old\", \"red\", \"rough\", \"still\", \"small\", \"sparkling\", \"throbbing\", \"shy\", \"wandering\", \"withered\", \"wild\", \"black\", \"young\", \"holy\", \"solitary\", \"fragrant\", \"aged\", \"snowy\", \"proud\", \"floral\", \"restless\", \"divine\", \"polished\", \"ancient\", \"purple\", \"lively\", \"nameless\"];\r\n    const nouns = [\"waterfall\", \"river\", \"breeze\", \"moon\", \"rain\", \"wind\", \"sea\", \"morning\", \"snow\", \"lake\", \"sunset\", \"pine\", \"shadow\", \"leaf\", \"dawn\", \"glitter\", \"forest\", \"hill\", \"cloud\", \"meadow\", \"sun\", \"glade\", \"bird\", \"brook\", \"butterfly\", \"bush\", \"dew\", \"dust\", \"field\", \"fire\", \"flower\", \"firefly\", \"feather\", \"grass\", \"haze\", \"mountain\", \"night\", \"pond\", \"darkness\", \"snowflake\", \"silence\", \"sound\", \"sky\", \"shape\", \"surf\", \"thunder\", \"violet\", \"water\", \"wildflower\", \"wave\", \"water\", \"resonance\", \"sun\", \"wood\", \"dream\", \"cherry\", \"tree\", \"fog\", \"frost\", \"voice\", \"paper\", \"frog\", \"smoke\", \"star\"];\r\n    const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\r\n    const noun = nouns[Math.floor(Math.random() * nouns.length)];\r\n    const user = `${adjective.slice(0, 1).toUpperCase()}${adjective.slice(1)}${noun}`\r\n    return user;\r\n  }\r\n\r\n  const randomColor = () => {\r\n    return '#' + Math.floor(Math.random() * 0xFFFFFF).toString(16);\r\n  }\r\n\r\n  const getInverseColor = (hexColor) => {\r\n    const color = hexColor.slice(1);\r\n    const r = 255 - parseInt(color.slice(0, 2), 16);\r\n    const g = 255 - parseInt(color.slice(2, 4), 16);\r\n    const b = 255 - parseInt(color.slice(4, 6), 16);\r\n    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setUsername(randomName());\r\n    setUserColor(randomColor());\r\n  }, []);\r\n\r\n  const CLIENT_ID = '2sxe3EkxMn0uTqkz';\r\n  const drone = useMemo(() => new window.Scaledrone(CLIENT_ID, {\r\n    data: {\r\n      name: username,\r\n    },\r\n  }), []);\r\n\r\n  const handleMembers = (members) => {\r\n    return setMembers(members);\r\n  };\r\n\r\n  useEffect(() => {\r\n    drone.on('open', error => {\r\n      if (error) {\r\n          alert('Došlo je do pogreške, molim vas pokušajte ponovo!');\r\n          console.error(error);\r\n        }\r\n    });\r\n\r\n    const room = drone.subscribe('observable-room');\r\n\r\n    room.on('open', (error) => {\r\n      if (error) {\r\n        alert('Došlo je do pogreške, molim vas pokušajte ponovo!');\r\n        console.error(error);\r\n        return;\r\n      }\r\n      console.log('Successfully joined room');\r\n    });\r\n\r\n    room.on('members', (members) => {\r\n      handleMembers(members);\r\n    });\r\n\r\n    room.on('message', (message) => {\r\n      const newMessage = {\r\n        username: message.data.substr(0, message.data.indexOf(\":\")),\r\n        text: message.data.substr(message.data.indexOf(\":\") + 1),\r\n        data: message.data\r\n      };\r\n      if (newMessage.username !== username) {\r\n        setMessages(prevMessages => [...prevMessages, newMessage]);\r\n      }\r\n    });\r\n\r\n    drone.on('close', (event) => {\r\n      alert('Connection was closed', event);\r\n      console.log('Connection was closed', event);\r\n    });\r\n\r\n  }, [messages]);\r\n\r\n  const handleMessageChange = (event) => {\r\n    setMessage(event.target.value);\r\n  };\r\n\r\n  const handleMessageSubmit = (event) => {\r\n    \r\n    event.preventDefault();\r\n\r\n    const newMessage = {\r\n      username: username,\r\n      text: message,\r\n      data: `${username}: ${message}`\r\n    };\r\n\r\n    setMessages(messages => [...messages, newMessage]);\r\n    setMessage('');\r\n\r\n    drone.publish({\r\n      room: 'observable-room',\r\n      message: newMessage.data\r\n    });\r\n\r\n    drone.on('error', (error) => {\r\n      alert('Nije uspjelo slanje poruke, molim vas pokušajte ponovo!')\r\n      console.error('Error publishing message:', error);\r\n    });\r\n  };\r\n\r\n  const renderMessages = () => {\r\n    return ( messages.map((message, index) => {\r\n      const messageClass = message.username === username ? 'user-message' : 'other-message';\r\n      const textColor = getInverseColor(userColor);\r\n      return (\r\n        <MDBListGroupItem\r\n          key={index}\r\n          className={`message ${messageClass} text-${message.username === username ? 'end' : 'start'} mb-2 d-flex justify-content-${message.username === username ? \"end\" : \"start\"}`}\r\n          style={{ backgroundColor: `${message.username === username ? userColor : textColor}`, color: `${message.username === username ? textColor : userColor}` }}\r\n          >\r\n        <div className={`d-flex flex-column justify-content-${message.username === username ? 'end' : 'start'}`}>\r\n          <span className={`fw-bold text-black ${messageClass}`}>{message.username}:</span>\r\n          <span className={`message ${messageClass} text-${message.username === username ? 'end' : 'start'}`}>{message.text}</span>\r\n        </div>\r\n      </MDBListGroupItem>\r\n      );\r\n    }));\r\n  };\r\n\r\n  const renderUsers = () => {\r\n    return (members.map((member, index) => {\r\n      return <MDBListGroupItem \r\n          key={index}\r\n          className='d-flex align-items-center justify-content-center mt-1'>\r\n            <span className=\"badge rounded-pill bg-secondary\">{member.id}</span>\r\n        </MDBListGroupItem>\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <div className='container p-4 d-flex-column align-items-center'>\r\n      <div className='chat-header d-flex align-items-center justify-content-center'>\r\n        <h2 className='my-3 text-black'>Moj Chat App</h2>\r\n      </div>\r\n      <div className='chat-body mb-3 p-5 border border-dark border-3'>\r\n        <MDBListGroup className='mb-3'>{renderMessages()}</MDBListGroup>\r\n        <form onSubmit={handleMessageSubmit}>\r\n          <div className='text-center'>\r\n            <MDBInput className='mb-3 border border-3 border-primary'\r\n              type='text'\r\n              placeholder='Napišite poruku...'\r\n              value={message}\r\n              onChange={handleMessageChange}\r\n              autoFocus={true}\r\n              />\r\n            <MDBBtn color='primary' type='submit'><i className='fas fa-envelope me-2'></i>Pošalji</MDBBtn>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div className='chat-footer text-center text-black mt-3'>\r\n        <p>Vaše korisničko ime je: <span className='text-white'>{username}</span></p>\r\n        <p>Online korisnici: <MDBListGroup className='d-flex align-items-center justify-content-center'>{renderUsers()}</MDBListGroup></p>\r\n      </div>\r\n    </div>\r\n  );\r\n};","C:\\Users\\Korisnik\\Downloads\\ALGEBRA\\Portfolio\\Seminarski\\algebra-seminarski\\src\\reportWebVitals.js",[],[],{"ruleId":"20","severity":1,"message":"21","line":43,"column":7,"nodeType":"22","endLine":43,"endColumn":9,"suggestions":"23"},{"ruleId":"20","severity":1,"message":"24","line":88,"column":6,"nodeType":"22","endLine":88,"endColumn":16,"suggestions":"25"},"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'username'. Either include it or remove the dependency array.","ArrayExpression",["26"],"React Hook useEffect has missing dependencies: 'drone' and 'username'. Either include them or remove the dependency array.",["27"],{"desc":"28","fix":"29"},{"desc":"30","fix":"31"},"Update the dependencies array to be: [username]",{"range":"32","text":"33"},"Update the dependencies array to be: [drone, messages, username]",{"range":"34","text":"35"},[2741,2743],"[username]",[3934,3944],"[drone, messages, username]"]